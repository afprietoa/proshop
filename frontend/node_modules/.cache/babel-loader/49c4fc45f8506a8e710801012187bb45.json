{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { updateCart } from '../utils/cartUtils';\nconst initialState = localStorage.getItem('cart') ? JSON.parse(localStorage.getItem('cart')) : {\n  cartItems: [],\n  shippingAddress: {},\n  paymentMethod: 'PayPal'\n};\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    addToCart: (state, action) => {\n      // NOTE: we don't need user, rating, numReviews or reviews\n      // in the cart\n      const {\n        user,\n        rating,\n        numReviews,\n        reviews,\n        ...item\n      } = action.payload;\n      const existItem = state.cartItems.find(x => x._id === item._id);\n      if (existItem) {\n        state.cartItems = state.cartItems.map(x => x._id === existItem._id ? item : x);\n      } else {\n        state.cartItems = [...state.cartItems, item];\n      }\n      return updateCart(state, item);\n    },\n    removeFromCart: (state, action) => {\n      state.cartItems = state.cartItems.filter(x => x._id !== action.payload);\n      return updateCart(state);\n    },\n    saveShippingAddress: (state, action) => {\n      state.shippingAddress = action.payload;\n      localStorage.setItem('cart', JSON.stringify(state));\n    },\n    savePaymentMethod: (state, action) => {\n      state.paymentMethod = action.payload;\n      localStorage.setItem('cart', JSON.stringify(state));\n    }\n  }\n});\nexport const {\n  addToCart,\n  removeFromCart,\n  saveShippingAddress\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","updateCart","initialState","localStorage","getItem","JSON","parse","cartItems","shippingAddress","paymentMethod","cartSlice","name","reducers","addToCart","state","action","user","rating","numReviews","reviews","item","payload","existItem","find","x","_id","map","removeFromCart","filter","saveShippingAddress","setItem","stringify","savePaymentMethod","actions","reducer"],"sources":["C:/Users/Hp/Desktop/proshop/frontend/src/slices/cartSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\nimport { updateCart } from '../utils/cartUtils';\r\n\r\nconst initialState = localStorage.getItem('cart')\r\n  ? JSON.parse(localStorage.getItem('cart'))\r\n  : { cartItems: [], shippingAddress: {}, paymentMethod: 'PayPal' };\r\n\r\nconst cartSlice = createSlice({\r\n  name: 'cart',\r\n  initialState,\r\n  reducers: {\r\n    addToCart: (state, action) => {\r\n        // NOTE: we don't need user, rating, numReviews or reviews\r\n        // in the cart\r\n        const { user, rating, numReviews, reviews, ...item } = action.payload;\r\n  \r\n        const existItem = state.cartItems.find((x) => x._id === item._id);\r\n  \r\n        if (existItem) {\r\n          state.cartItems = state.cartItems.map((x) =>\r\n            x._id === existItem._id ? item : x\r\n          );\r\n        } else {\r\n          state.cartItems = [...state.cartItems, item];\r\n        }\r\n  \r\n        return updateCart(state, item);\r\n            \r\n        },\r\n        removeFromCart: (state, action) => {\r\n            state.cartItems = state.cartItems.filter((x) => x._id !== action.payload);\r\n            return updateCart(state);\r\n        },\r\n        saveShippingAddress: (state, action) => {\r\n          state.shippingAddress = action.payload;\r\n          localStorage.setItem('cart', JSON.stringify(state));\r\n        },\r\n        savePaymentMethod: (state, action) => {\r\n          state.paymentMethod = action.payload;\r\n          localStorage.setItem('cart', JSON.stringify(state));\r\n        },\r\n    }\r\n});\r\n\r\nexport const { \r\n  addToCart,\r\n  removeFromCart,\r\n  saveShippingAddress\r\n } = cartSlice.actions;\r\n\r\nexport default cartSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,UAAU,QAAQ,oBAAoB;AAE/C,MAAMC,YAAY,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,GAC7CC,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,GACxC;EAAEG,SAAS,EAAE,EAAE;EAAEC,eAAe,EAAE,CAAC,CAAC;EAAEC,aAAa,EAAE;AAAS,CAAC;AAEnE,MAAMC,SAAS,GAAGV,WAAW,CAAC;EAC5BW,IAAI,EAAE,MAAM;EACZT,YAAY;EACZU,QAAQ,EAAE;IACRC,SAAS,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC1B;MACA;MACA,MAAM;QAAEC,IAAI;QAAEC,MAAM;QAAEC,UAAU;QAAEC,OAAO;QAAE,GAAGC;MAAK,CAAC,GAAGL,MAAM,CAACM,OAAO;MAErE,MAAMC,SAAS,GAAGR,KAAK,CAACP,SAAS,CAACgB,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,GAAG,KAAKL,IAAI,CAACK,GAAG,CAAC;MAEjE,IAAIH,SAAS,EAAE;QACbR,KAAK,CAACP,SAAS,GAAGO,KAAK,CAACP,SAAS,CAACmB,GAAG,CAAEF,CAAC,IACtCA,CAAC,CAACC,GAAG,KAAKH,SAAS,CAACG,GAAG,GAAGL,IAAI,GAAGI,CACnC,CAAC;MACH,CAAC,MAAM;QACLV,KAAK,CAACP,SAAS,GAAG,CAAC,GAAGO,KAAK,CAACP,SAAS,EAAEa,IAAI,CAAC;MAC9C;MAEA,OAAOnB,UAAU,CAACa,KAAK,EAAEM,IAAI,CAAC;IAE9B,CAAC;IACDO,cAAc,EAAEA,CAACb,KAAK,EAAEC,MAAM,KAAK;MAC/BD,KAAK,CAACP,SAAS,GAAGO,KAAK,CAACP,SAAS,CAACqB,MAAM,CAAEJ,CAAC,IAAKA,CAAC,CAACC,GAAG,KAAKV,MAAM,CAACM,OAAO,CAAC;MACzE,OAAOpB,UAAU,CAACa,KAAK,CAAC;IAC5B,CAAC;IACDe,mBAAmB,EAAEA,CAACf,KAAK,EAAEC,MAAM,KAAK;MACtCD,KAAK,CAACN,eAAe,GAAGO,MAAM,CAACM,OAAO;MACtClB,YAAY,CAAC2B,OAAO,CAAC,MAAM,EAAEzB,IAAI,CAAC0B,SAAS,CAACjB,KAAK,CAAC,CAAC;IACrD,CAAC;IACDkB,iBAAiB,EAAEA,CAAClB,KAAK,EAAEC,MAAM,KAAK;MACpCD,KAAK,CAACL,aAAa,GAAGM,MAAM,CAACM,OAAO;MACpClB,YAAY,CAAC2B,OAAO,CAAC,MAAM,EAAEzB,IAAI,CAAC0B,SAAS,CAACjB,KAAK,CAAC,CAAC;IACrD;EACJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EACXD,SAAS;EACTc,cAAc;EACdE;AACD,CAAC,GAAGnB,SAAS,CAACuB,OAAO;AAEtB,eAAevB,SAAS,CAACwB,OAAO"},"metadata":{},"sourceType":"module"}